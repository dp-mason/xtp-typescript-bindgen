import * as main from "./main"
<% if (Object.values(schema.schemas).length > 0) { %>
import {
  <% Object.values(schema.schemas).forEach(schema => { -%>
    <%= schema.name %>,
  <% }) -%>
} from './pdk'
<% } %>

<% schema.exports.forEach(ex => { -%>
export function <%= ex.name %>(): number {
  <% if (!propertyIsEmpty(ex.input)) { -%>
    <% if (ex.input.contentType === 'application/json') { -%>
      const input: <%= toTypeScriptType(ex.input) %> = JSON.parse(Host.inputString())
    <% } else if (ex.input.type === 'string') { -%>
      const input = Host.inputString() <%= (ex.input.$ref && ex.input.$ref.enum) ? `as ${ex.input.$ref.name}` : "" %>
    <% } else { -%>
      const input: ArrayBufferLike = Host.inputBytes()
    <% } -%>

    <% if (!propertyIsEmpty(ex.output)) { -%>
      const output = main.<%= ex.name %>Impl(input)
    <% } else { -%>
      main.<%= ex.name %>Impl(input)
    <% } -%>
  <% } else { -%>
    <% if (!propertyIsEmpty(ex.output)) { -%>
      const output = main.<%= ex.name %>Impl()
    <% } else { -%>
      main.<%= ex.name %>Impl()
    <% } -%>
  <% } -%>

  <% if (!propertyIsEmpty(ex.output)) { -%>
    <% if (ex.output.contentType === 'application/json') { -%>
      Host.outputString(JSON.stringify(output))
    <% } else if (ex.output.type === 'string') { -%>
      Host.outputString(output)
    <% } else { -%>
      Host.outputBytes(output)
    <% } -%>
  <% } -%>

  return 0
}

<% }) %>

